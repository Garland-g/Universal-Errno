use Universal::Errno;
use Universal::Errno::Constants;

use Test;

{
  my $error = X::Errno.new(:errno(Errno::EBADF));

  isa-ok $error, X::Errno, <Correct class>;

  is $error.symbol, Errno::EBADF, <X::Errno has correct symbol>;
  is +$error, +Errno::EBADF, <X::Errno containts correct integer value>;
  is ~$error, strerror(Errno::EBADF), <X::Errno stringifies correctly>;
  is $error.message, strerror(Errno::EBADF), <X::Errno message is stringifed errno>;
}

{
  my sub error-code(Int $error) is error-model<neg-errno> { -$error }

  my $error = error-code(3);
  $error.so;
  $error .= exception;

  isa-ok $error, X::Errno, <Correct class from neg-errno trait>;
  is $error.symbol, Errno(3), <Error has correct symbol>;
  is +$error, 3, <Error value is correct>;
  is ~$error, strerror(3), <Error string is correct>;

}

{
  my sub error-code(Int $error) is error-model<errno> {
    set_errno($error);
    -1;
  }

  my $error = error-code(2);
  $error.so;
  $error .= exception;

  isa-ok $error, X::Errno, <Correct class from errno trait>;
  is $error.symbol, Errno(2), <Error has correct symbol>;
  is +$error, 2, <Error value is correct>;
  is ~$error, strerror(2), <Error string is correct>;
}

{
  my sub error-code-with-second-arg(Int $error, Str $test) is error-model<neg-errno> { -$error }

  my $error = error-code-with-second-arg(3, "test");
  $error.so;
  $error .= exception;

  isa-ok $error, X::Errno, <Correct class from neg-errno trait>;
  is $error.symbol, Errno(3), <Error has correct symbol>;
  is +$error, 3, <Error value is correct>;
  is ~$error, strerror(3), <Error string is correct>;

}

{
  my sub error-code-with-second-arg(Int $error, Str $test) is error-model<errno> {
    set_errno($error);
    -1;
  }

  my $error = error-code-with-second-arg(2, "test");
  $error.so;
  $error .= exception;

  isa-ok $error, X::Errno, <Correct class from errno trait>;
  is $error.symbol, Errno(2), <Error has correct symbol>;
  is +$error, 2, <Error value is correct>;
  is ~$error, strerror(2), <Error string is correct>;
}

# Inline sub versions of traits

{
  my sub error-code-with-second-arg(Int $error, Str $test) { -$error }

  my $error = check-neg-errno error-code-with-second-arg(3, "test");
  $error.so;
  $error .= exception;

  isa-ok $error, X::Errno, <Correct class from neg-errno trait>;
  is $error.symbol, Errno(3), <Error has correct symbol>;
  is +$error, 3, <Error value is correct>;
  is ~$error, strerror(3), <Error string is correct>;

}

{
  my sub error-code-with-second-arg(Int $error, Str $test) {
    set_errno($error);
    -1;
  }

  my $error = check-errno error-code-with-second-arg(2, "test");
  $error.so;
  $error.= exception;

  isa-ok $error, X::Errno, <Correct class from the errno trait>;
  is $error.symbol, Errno(2), <Error has correct symbol>;
  is +$error, 2, <Error value is correct>;
  is ~$error, strerror(2), <Error string is correct>;
}

done-testing;
